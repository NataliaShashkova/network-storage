Как организовать клиент-серверное взаимодействие? Класс Socket строит общение клиента с сервером через каналы ввода/вывода. 
Сокет - это конечная точка для связи между двумя машинами. Пример:
1. Сокет клиента, по которому клиент передает информацию на сервер Socket(InetAddress host- это IP-адрес сервера,  int serverPort это порт)

2. Сокет сервера, который принимает информацию клиента ServerSocket(int serverPort)
Для срединения используется метод accept().

Пример (на стороне сервера):

ServerSocket servsock = new ServerSocket(7896);
Socket sock = servsock.accept();
Первая строка примера создаёт «слушающий» сокет сервера (ожидающий клиента). Во второй строке метод accept() серверного сокета (servsock) возвращает соответствующий сокет (sock) для общения с клиентом.

После сеанса связи сокеты следует закрыть, используя метод close().
Netty может обрабатывать практически любой трафик. Он также может обрабатывать несколько типов одновременно, например, WebSockets и HTTP через один и тот же порт одновременно

Как и в каком виде передавать файлы?
Файлы передаются в виде потока байтов.
Как пересылать большие файлы?
Файлы размером больше 100 Мб не передаются.
Как пересылать служебные команды?
Служебные команды передаются в объектах (Command DTO)ю DTO пригодятся в системах с удаленными вызовами, так как они помогают сократить их количествои время прохождения между клиентом и сервером.
Что хранить в базе данных?
Для хранения данных используется СУДБ PostgreSQL + Hibernate. В базе данных : сведения о пользователях (id, имя, пароль); сведения о файлах, хранящихся на сервере(id, id пользователя, имя файла, размер, дата создания и обновления)
Как передавать структуру каталогов/файлов?
Каталоги пока не поддерживаются. Файлы всех пользователей хранятся на сервере в одном каталоге, при хранении используется служебное имя, совпадающее с Id файла в базе данных.
Какую библиотеку использовать для сетевого взаимодействия: java.io, java.nio, Netty?
Для сетевого взаимодействия используются Netty (на сервере) и java.io на клиенте.
